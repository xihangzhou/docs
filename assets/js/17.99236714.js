(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{651:function(a,s,t){a.exports=t.p+"assets/img/1590391572207.660170b0.png"},652:function(a,s,t){a.exports=t.p+"assets/img/1590392371890.4ad84fa1.png"},870:function(a,s,t){"use strict";t.r(s);var e=t(45),l=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"jquery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jquery"}},[a._v("#")]),a._v(" JQuery")]),a._v(" "),e("p",[a._v("@(前端框架)")]),a._v(" "),e("h2",{attrs:{id:"选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择器"}},[a._v("#")]),a._v(" 选择器")]),a._v(" "),e("h3",{attrs:{id:"按id查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按id查找"}},[a._v("#")]),a._v(" 按ID查找")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 查找<div id=\"abc\">:\nvar div = $('#abc');\n")])])]),e("p",[a._v("注意，#abc以#开头。返回的对象是jQuery对象。")]),a._v(" "),e("h3",{attrs:{id:"jquery对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jquery对象"}},[a._v("#")]),a._v(" JQuery对象")]),a._v(" "),e("p",[a._v("什么是jQuery对象？jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。")]),a._v(" "),e("p",[a._v("以上面的查找为例，如果id为abc的")]),e("div",[a._v("存在，返回的jQuery对象如下："),e("p"),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('[<div id="abc">...</div>]\n')])])]),e("p",[a._v("如果id为abc的")]),e("div",[a._v("不存在，返回的jQuery对象如下："),e("p"),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[]\n")])])]),e("p",[a._v("总之jQuery的选择器不会返回undefined或者null，这样的好处是你不必在下一行判断if (div === undefined)。")]),a._v(" "),e("p",[a._v("jQuery对象和DOM对象之间可以互相转化：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var div = $('#abc'); // jQuery对象\nvar divDom = div.get(0); // 假设存在div，获取第1个DOM元素\nvar another = $(divDom); // 重新把DOM包装为jQuery对象\n")])])]),e("p",[a._v("通常情况下你不需要获取DOM对象，直接使用jQuery对象更加方便。如果你拿到了一个DOM对象，那可以简单地调用$(aDomObject)把它变成jQuery对象，这样就可以方便地使用jQuery的API了。")]),a._v(" "),e("h3",{attrs:{id:"按tag查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按tag查找"}},[a._v("#")]),a._v(" 按tag查找")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var ps = $('p'); // 返回所有<p>节点\nps.length; // 数一数页面有多少个<p>节点\n")])])]),e("h3",{attrs:{id:"按class查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按class查找"}},[a._v("#")]),a._v(" 按class查找")]),a._v(" "),e("p",[a._v("按class查找注意在class名称前加一个.：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var a = $(\'.red\'); // 所有节点包含`class="red"`都将返回\n// 例如:\n// <div class="red">...</div>\n// <p class="green red">...</p>\n')])])]),e("p",[a._v("通常很多节点有多个class，我们可以查找同时包含red和green的节点：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var a = $(\'.red.green\'); // 注意没有空格！\n// 符合条件的节点：\n// <div class="red green">...</div>\n// <div class="blue green red">...</div>\n')])])]),e("h3",{attrs:{id:"按属性查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按属性查找"}},[a._v("#")]),a._v(" 按属性查找")]),a._v(" "),e("p",[a._v("一个DOM节点除了id和class外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var email = $(\'[name=email]\'); // 找出<??? name="email">\nvar passwordInput = $(\'[type=password]\'); // 找出<??? type="password">\nvar a = $(\'[items="A B"]\'); // 找出<??? items="A B">\n')])])]),e("p",[a._v("当属性的值包含空格等特殊字符时，需要用双引号括起来。")]),a._v(" "),e("p",[a._v("按属性查找还可以使用前缀查找或者后缀查找：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var icons = $(\'[name^=icon]\'); // 找出所有name属性值以icon开头的DOM\n// 例如: name="icon-1", name="icon-2"\nvar names = $(\'[name$=with]\'); // 找出所有name属性值以with结尾的DOM\n// 例如: name="startswith", name="endswith"\n')])])]),e("p",[a._v("这个方法尤其适合通过class属性查找，且不受class包含多个名称的影响：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var icons = $(\'[class^="icon-"]\'); // 找出所有class包含至少一个以`icon-`开头的DOM\n// 例如: class="icon-clock", class="abc icon-home"\n')])])]),e("h3",{attrs:{id:"组合查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合查找"}},[a._v("#")]),a._v(" 组合查找")]),a._v(" "),e("p",[a._v("组合查找就是把上述简单选择器组合起来使用。如果我们查找$('[name=email]')，很可能把表单外的")]),e("div",{attrs:{name:"email"}},[a._v("也找出来，但我们只希望查找"),e("input"),a._v("，就可以这么写："),e("p"),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var emailInput = $('input[name=email]'); // 不会找出<div name=\"email\">\n")])])]),e("p",[a._v("同样的，根据tag和class来组合查找也很常见：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var tr = $('tr.red'); // 找出<tr class=\"red ...\">...</tr>\n")])])]),e("h3",{attrs:{id:"多项选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多项选择器"}},[a._v("#")]),a._v(" 多项选择器")]),a._v(" "),e("p",[a._v("多项选择器就是把多个选择器用,组合起来一块选：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('p,div'); // 把<p>和<div>都选出来\n$('p.red,p.green'); // 把<p class=\"red\">和<p class=\"green\">都选出来\n")])])]),e("p",[a._v("要注意的是，选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。例如，")]),e("p",{staticClass:"red green"},[a._v("不会被上面的$('p.red,p.green')选择两次。")]),a._v(" "),e("h3",{attrs:{id:"层级选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#层级选择器"}},[a._v("#")]),a._v(" 层级选择器")]),a._v(" "),e("p",[a._v("如果两个DOM元素具有层级关系，就可以用$('ancestor descendant')来选择，层级之间用空格隔开。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\x3c!-- HTML结构 --\x3e\n<div class="testing">\n    <ul class="lang">\n        <li class="lang-javascript">JavaScript</li>\n        <li class="lang-python">Python</li>\n        <li class="lang-lua">Lua</li>\n    </ul>\n</div>\n')])])]),e("p",[a._v("要选出JavaScript，可以用层级选择器：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('ul.lang li.lang-javascript'); // [<li class=\"lang-javascript\">JavaScript</li>]\n$('div.testing li.lang-javascript'); // [<li class=\"lang-javascript\">JavaScript</li>]\n")])])]),e("p",[a._v("因为")]),e("div",[a._v("和"),e("ul",[a._v("都是"),e("li",[a._v("的祖先节点，所以上面两种方式都可以选出相应的")]),e("li",[a._v("节点。"),e("p"),a._v(" "),e("p",[a._v("要选择所有的")])]),e("li",[a._v("节点，用："),e("p"),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('ul.lang li');\n")])])]),e("p",[a._v("这种层级选择器相比单个的选择器好处在于，它缩小了选择范围，因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素。")]),a._v(" "),e("p",[a._v("例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('form[name=upload] input');\n")])])]),e("p",[a._v("就把选择范围限定在name属性为upload的表单里。如果页面有很多表单，其他表单的"),e("input"),a._v("不会被选择。")]),a._v(" "),e("p",[a._v("多层选择也是允许的：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('form.test p input'); // 在form表单选择被<p>包含的<input>\n")])])]),e("h3",{attrs:{id:"子选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子选择器"}},[a._v("#")]),a._v(" 子选择器")]),a._v(" "),e("p",[a._v("子选择器$('parent>child')类似层级选择器，但是限定了层级关系必须是父子关系，就是"),e("child",[a._v("节点必须是"),e("parent",[a._v("节点的"),e("strong",[a._v("直属子节点")]),a._v("。还是以上面的例子：")])],1)],1),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('ul.lang>li.lang-javascript'); // 可以选出[<li class=\"lang-javascript\">JavaScript</li>]\n$('div.testing>li.lang-javascript'); // [], 无法选出，因为<div>和<li>不构成父子关系\n")])])]),e("h3",{attrs:{id:"过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[a._v("#")]),a._v(" 过滤器")]),a._v(" "),e("p",[a._v("过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点\n\n$('ul.lang li:first-child'); // 仅选出JavaScript\n$('ul.lang li:last-child'); // 仅选出Lua\n$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始\n$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素\n$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素\n")])])]),e("h3",{attrs:{id:"表单相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表单相关"}},[a._v("#")]),a._v(" 表单相关")]),a._v(" "),e("p",[e("img",{attrs:{src:t(651),alt:"Alt text"}})]),a._v(" "),e("h3",{attrs:{id:"查找和过滤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找和过滤"}},[a._v("#")]),a._v(" 查找和过滤")]),a._v(" "),e("p",[a._v("通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。")]),a._v(" "),e("p",[a._v("最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\x3c!-- HTML结构 --\x3e\n<ul class="lang">\n    <li class="js dy">JavaScript</li>\n    <li class="dy">Python</li>\n    <li id="swift">Swift</li>\n    <li class="dy">Scheme</li>\n    <li name="haskell">Haskell</li>\n</ul>\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("用find()查找：\nvar ul = $('ul.lang'); // 获得<ul>\nvar dy = ul.find('.dy'); // 获得JavaScript, Python, Scheme\nvar swf = ul.find('#swift'); // 获得Swift\nvar hsk = ul.find('[name=haskell]'); // 获得Haskell\n")])])]),e("p",[a._v("如果要从当前节点开始向上查找，使用parent()方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var swf = $('#swift'); // 获得Swift\nvar parent = swf.parent(); // 获得Swift的上层节点<ul>\nvar a = swf.parent('.red'); // 获得Swift的上层节点<ul>，同时传入过滤条件。如果ul不符合条件，返回空jQuery对象\n")])])]),e("p",[a._v("对于位于同一层级的节点，可以通过next()和prev()方法，例如：\n当我们已经拿到Swift节点后：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var swift = $('#swift');\n\nswift.next(); // Scheme\nswift.next('[name=haskell]'); // 空的jQuery对象，因为Swift的下一个元素Scheme不符合条件[name=haskell]\n\nswift.prev(); // Python\nswift.prev('.dy'); // Python，因为Python同时符合过滤器条件.dy\n")])])]),e("h3",{attrs:{id:"过滤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤"}},[a._v("#")]),a._v(" 过滤")]),a._v(" "),e("p",[a._v("filter()方法可以过滤掉不符合选择器条件的节点：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell\nvar a = langs.filter('.dy'); // 拿到JavaScript, Python, Scheme\n")])])]),e("p",[a._v("或者传入一个函数，要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell\nlangs.filter(function () {\n    return this.innerHTML.indexOf('S') === 0; // 返回S开头的节点\n}); // 拿到Swift, Scheme\n")])])]),e("p",[a._v("map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell\nvar arr = langs.map(function () {\n    return this.innerHTML;\n}).get(); // 用get()拿到包含string的Array：['JavaScript', 'Python', 'Swift', 'Scheme', 'Haskell']\n")])])]),e("p",[a._v("此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell\nvar js = langs.first(); // JavaScript，相当于$('ul.lang li:first-child')\nvar haskell = langs.last(); // Haskell, 相当于$('ul.lang li:last-child')\nvar sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致\n")])])]),e("h2",{attrs:{id:"操作dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作dom"}},[a._v("#")]),a._v(" 操作DOM")]),a._v(" "),e("p",[a._v("回顾一下修改DOM的CSS、文本、设置HTML有多么麻烦，而且有的浏览器只有innerHTML，有的浏览器支持innerText，有了jQuery对象，不需要考虑浏览器差异了，全部统一操作！")]),a._v(" "),e("h3",{attrs:{id:"修改text和html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改text和html"}},[a._v("#")]),a._v(" 修改Text和HTML")]),a._v(" "),e("p",[a._v("jQuery对象的text()和html()方法分别获取节点的文本和原始HTML文本，例如，如下的HTML结构：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\x3c!-- HTML结构 --\x3e\n<ul id="test-ul">\n    <li class="js">JavaScript</li>\n    <li name="book">Java &amp; JavaScript</li>\n</ul>\n')])])]),e("p",[a._v("分别获取文本和HTML：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('#test-ul li[name=book]').text(); // 'Java & JavaScript'\n$('#test-ul li[name=book]').html(); // 'Java &amp; JavaScript'\n")])])]),e("p",[a._v("如何设置文本或HTML？jQuery的API设计非常巧妙：无参数调用text()是获取文本，传入参数就变成设置文本，HTML也是类似操作\n"),e("img",{attrs:{src:t(652),alt:"Alt text"}}),a._v("\n一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('#test-ul li').text('JS'); // 是不是两个节点都变成了JS？\n")])])]),e("p",[a._v("所以jQuery对象的另一个好处是我们可以执行一个操作，作用在对应的一组DOM节点上。即使选择器没有返回任何DOM节点，调用jQuery对象的方法仍然不会报错：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 如果不存在id为not-exist的节点：\n$('#not-exist').text('Hello'); // 代码不报错，没有节点被设置为'Hello'\n")])])]),e("p",[a._v("这意味着jQuery帮你免去了许多if语句。")]),a._v(" "),e("h3",{attrs:{id:"修改css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改css"}},[a._v("#")]),a._v(" 修改CSS")]),a._v(" "),e("p",[a._v("jQuery对象有“批量操作”的特点，这用于修改CSS实在是太方便了。考虑下面的HTML结构：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\x3c!-- HTML结构 --\x3e\n<ul id="test-css">\n    <li class="lang dy"><span>JavaScript</span></li>\n    <li class="lang"><span>Java</span></li>\n    <li class="lang dy"><span>Python</span></li>\n    <li class="lang"><span>Swift</span></li>\n    <li class="lang dy"><span>Scheme</span></li>\n</ul>\n')])])]),e("p",[a._v("要高亮显示动态语言，调用jQuery对象的css('name', 'value')方法，我们用一行语句实现：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$('#test-css li.dy>span').css('background-color', '#ffd351').css('color', 'red');\n")])])]),e("p",[e("strong",[a._v("注意")]),a._v("，jQuery对象的所有方法都返回一个jQuery对象（可能是新的也可能是自身），这样我们可以进行链式调用，非常方便。\njQuery对象的css()方法还可以这么用：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var div = $('#test-div');\ndiv.css('color'); // '#000033', 获取CSS属性\ndiv.css('color', '#336699'); // 设置CSS属性\ndiv.css('color', ''); // 清除CSS属性\n")])])]),e("p",[a._v("为了和JavaScript保持一致，CSS属性可以用'background-color'和'backgroundColor'两种格式。")]),a._v(" "),e("p",[a._v("css()方法将作用于DOM节点的style属性，具有最高优先级。如果要修改class属性，可以用jQuery提供的下列方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var div = $('#test-div');\ndiv.hasClass('highlight'); // false， class是否包含highlight\ndiv.addClass('highlight'); // 添加highlight这个class\ndiv.removeClass('highlight'); // 删除highlight这个class\n")])])]),e("h3",{attrs:{id:"添加dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加dom"}},[a._v("#")]),a._v(" 添加DOM")]),a._v(" "),e("p",[a._v("要添加新的DOM节点，除了通过jQuery的html()这种暴力方法外，还可以用append()方法，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div id="test-div">\n    <ul>\n        <li><span>JavaScript</span></li>\n        <li><span>Python</span></li>\n        <li><span>Swift</span></li>\n    </ul>\n</div>\n')])])]),e("p",[a._v("向列表新增一个语言")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var ul = $('#test-div>ul');\nul.append('<li><span>Haskell</span></li>');\n")])])]),e("p",[a._v("除了接受字符串，append()还可以传入原始的DOM对象，jQuery对象和函数对象：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 创建DOM对象:\nvar ps = document.createElement('li');\nps.innerHTML = '<span>Pascal</span>';\n// 添加DOM对象:\nul.append(ps);\n\n// 添加jQuery对象:\nul.append($('#scheme'));\n\n// 添加函数对象:\nul.append(function (index, html) {\n    return '<li><span>Language - ' + index + '</span></li>';\n});\n")])])]),e("p",[a._v("传入函数时，要求返回一个字符串、DOM对象或者jQuery对象。因为jQuery的append()可能作用于一组DOM节点，只有传入函数才能针对每个DOM生成不同的子节点。\n**append()**把DOM添加到最后，**prepend()**则把DOM添加到最前。\n另外注意，如果要添加的DOM节点已经存在于HTML文档中，它会首先从文档移除，然后再添加，也就是说，用append()，你可以移动一个DOM节点。\n如果要把新节点插入到指定位置，例如，JavaScript和Python之间，那么，可以先定位到JavaScript，然后用after()方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var js = $('#test-div>ul>li:first-child');\njs.after('<li><span>Lua</span></li>');\n")])])]),e("p",[a._v("也就是说，同级节点可以用after()或者before()方法。")]),a._v(" "),e("h3",{attrs:{id:"删除节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[a._v("#")]),a._v(" 删除节点")]),a._v(" "),e("p",[a._v("要删除DOM节点，拿到jQuery对象后直接调用remove()方法就可以了。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var li = $('#test-div>ul>li');\nli.remove(); // 所有<li>全被删除\n")])])]),e("h2",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[a._v("#")]),a._v(" 事件")]),a._v(" "),e("p",[a._v("因为JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码。\n由于不同的浏览器绑定事件的代码都不太一样，所以用jQuery来写代码，就屏蔽了不同浏览器的差异，我们总是编写相同的代码。")]),a._v(" "),e("h3",{attrs:{id:"绑定事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件"}},[a._v("#")]),a._v(" 绑定事件")]),a._v(" "),e("p",[a._v("举个例子，假设要在用户点击了超链接时弹出提示框，我们用jQuery这样绑定一个click事件：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* HTML:\n *\n * <a id=\"test-link\" href=\"#0\">点我试试</a>\n *\n */\n\n// 获取超链接的jQuery对象:\nvar a = $('#test-link');\na.on('click', function () {\n    alert('Hello!');\n});\n")])])]),e("p",[a._v("on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。")]),a._v(" "),e("p",[a._v("另一种更简化的写法是直接调用click()方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("a.click(function () {\n    alert('Hello!');\n});\n")])])]),e("h3",{attrs:{id:"能绑定的事件分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#能绑定的事件分类"}},[a._v("#")]),a._v(" 能绑定的事件分类")]),a._v(" "),e("h4",{attrs:{id:"鼠标事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#鼠标事件"}},[a._v("#")]),a._v(" 鼠标事件")]),a._v(" "),e("p",[a._v("click: 鼠标单击时触发；\ndblclick：鼠标双击时触发；\nmouseenter：鼠标进入时触发；\nmouseleave：鼠标移出时触发；\nmousemove：鼠标在DOM内部移动时触发；\nhover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。")]),a._v(" "),e("h4",{attrs:{id:"键盘事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#键盘事件"}},[a._v("#")]),a._v(" 键盘事件")]),a._v(" "),e("p",[a._v("键盘事件仅作用在当前焦点的DOM上，通常是"),e("input"),a._v("和"),e("textarea")])])])])])])])])}),[],!1,null,null,null);s.default=l.exports}}]);