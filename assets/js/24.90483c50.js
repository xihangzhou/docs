(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{866:function(t,s,_){"use strict";_.r(s);var v=_(45),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"git-note"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-note"}},[t._v("#")]),t._v(" Git Note")]),t._v(" "),_("h2",{attrs:{id:"git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),_("h3",{attrs:{id:"版本控制工具的功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本控制工具的功能"}},[t._v("#")]),t._v(" 版本控制工具的功能")]),t._v(" "),_("ul",[_("li",[t._v("协同修改")]),t._v(" "),_("li",[t._v("数据备份")]),t._v(" "),_("li",[t._v("版本管理\n"),_("ul",[_("li",[t._v("Git采取文件系统快照的方式")])])]),t._v(" "),_("li",[t._v("权限控制\n"),_("ul",[_("li",[t._v("对内进行权限控制")]),t._v(" "),_("li",[t._v("对外对开发者进行审核--Git独有")])])]),t._v(" "),_("li",[t._v("历史记录\n"),_("ul",[_("li",[t._v("查看修改内容")]),t._v(" "),_("li",[t._v("恢复到一个历史状态")])])]),t._v(" "),_("li",[t._v("分支管理\n"),_("ul",[_("li",[t._v("多条生产线同时推进")])])])]),t._v(" "),_("h3",{attrs:{id:"git的优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git的优势"}},[t._v("#")]),t._v(" Git的优势")]),t._v(" "),_("ul",[_("li",[t._v("本地完成，不要联网")]),t._v(" "),_("li",[t._v("完整性保证，利用hash")]),t._v(" "),_("li",[t._v("尽可能添加数据而不是删除或修改数据，很少产生不可逆的操作，随时返回历史版本")]),t._v(" "),_("li",[t._v("分支操作快捷流畅，创建和移动指针")]),t._v(" "),_("li",[t._v("与Linux命令全面兼容")])]),t._v(" "),_("h3",{attrs:{id:"git的本地结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git的本地结构"}},[t._v("#")]),t._v(" Git的本地结构")]),t._v(" "),_("ul",[_("li",[t._v("工作区(working tree)：写代码")]),t._v(" "),_("li",[t._v("暂存区(index file)：临时存储")]),t._v(" "),_("li",[t._v("本地库：历史版本")]),t._v(" "),_("li",[t._v("git add->暂存区 git commit->本地区")])]),t._v(" "),_("h3",{attrs:{id:"git-和-代码托管中心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-和-代码托管中心"}},[t._v("#")]),t._v(" Git 和 代码托管中心")]),t._v(" "),_("p",[t._v("Github是代码托管中心，维护远程库")]),t._v(" "),_("ul",[_("li",[t._v("局域网\n"),_("ul",[_("li",[t._v("自己搭建")])])]),t._v(" "),_("li",[t._v("外网\n"),_("ul",[_("li",[t._v("码云")]),t._v(" "),_("li",[t._v("Github")])])])]),t._v(" "),_("h3",{attrs:{id:"本地库和远程库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地库和远程库"}},[t._v("#")]),t._v(" 本地库和远程库")]),t._v(" "),_("ul",[_("li",[t._v("团队内部协作\n![image-20200301104518138](Git Note/image-20200301104518138.png)")])]),t._v(" "),_("h3",{attrs:{id:"git基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git基本原理"}},[t._v("#")]),t._v(" Git基本原理")]),t._v(" "),_("h4",{attrs:{id:"hash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),_("ul",[_("li",[t._v("特点\n"),_("ul",[_("li",[t._v("不管输入数据量多大，同一个hash算法，得到的结果长度都一样")]),t._v(" "),_("li",[t._v("算法确定，输入确定，输出确定")]),t._v(" "),_("li",[t._v("算法确定，输入变化，输出变化，通常很大（可用于校验文件）")]),t._v(" "),_("li",[t._v("算法不可逆")])])]),t._v(" "),_("li",[t._v("Git 底层用的是SHA-1算法")])]),t._v(" "),_("h4",{attrs:{id:"git保存版本的机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git保存版本的机制"}},[t._v("#")]),t._v(" Git保存版本的机制")]),t._v(" "),_("ul",[_("li",[t._v("保存机制")])]),t._v(" "),_("p",[t._v("![image-20201127114206213](/Users/zhouxihang/Desktop/知识总结/git/Git的基本使用/Git Note.assets/image-20201127114206213.png)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("提交对象")]),t._v(" "),_("p",[t._v("![image-20200301101718952](Git Note/image-20200301101718952.png)\n每一个文件都有一个对应的blob对象指向，并且有一个独有的hash值，所有的blob对象由一个tree对象指向，这个tree对象又由一个提交对象commit指向。")]),t._v(" "),_("p",[t._v("这个commit对象就是git log的commit的hash值")]),t._v(" "),_("p",[t._v("![image-20201127114648109](/Users/zhouxihang/Desktop/知识总结/git/Git的基本使用/Git Note.assets/image-20201127114648109.png)")])]),t._v(" "),_("li",[_("p",[t._v("提交对象及其父对象形成的链条")])])]),t._v(" "),_("p",[t._v("![image-20201127114726365](/Users/zhouxihang/Desktop/知识总结/git/Git的基本使用/Git Note.assets/image-20201127114726365.png)\nSnapshot就是快照，所有的提交对象通过链表的方式表示时间关系")]),t._v(" "),_("h4",{attrs:{id:"git分支管理机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git分支管理机制"}},[t._v("#")]),t._v(" Git分支管理机制")]),t._v(" "),_("ul",[_("li",[t._v("分支的创建")])]),t._v(" "),_("p",[t._v("![image-20200301102148044](Git Note/image-20200301102148044.png)")]),t._v(" "),_("ul",[_("li",[t._v("分支的切换")])]),t._v(" "),_("p",[t._v("![image-20200301102446380](Git Note/image-20200301102446380.png)")]),t._v(" "),_("p",[t._v("切换分支只是切换HEAD指针的指向所以很快")]),t._v(" "),_("ul",[_("li",[t._v("在分支上提交使得testing指针移动")])]),t._v(" "),_("p",[t._v("![image-20201127115457114](/Users/zhouxihang/Desktop/知识总结/git/Git的基本使用/Git Note.assets/image-20201127115457114.png)")]),t._v(" "),_("p",[t._v("在分支上提交只会移动testing指针")]),t._v(" "),_("ul",[_("li",[t._v("在master上也提交会造成分支")])]),t._v(" "),_("p",[t._v("![image-20201127115727948](/Users/zhouxihang/Desktop/知识总结/git/Git的基本使用/Git Note.assets/image-20201127115727948.png)")]),t._v(" "),_("h2",{attrs:{id:"git命令行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git命令行"}},[t._v("#")]),t._v(" Git命令行")]),t._v(" "),_("h3",{attrs:{id:"_1-本地库操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-本地库操作"}},[t._v("#")]),t._v(" 1.本地库操作")]),t._v(" "),_("h4",{attrs:{id:"_1-1本地库初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1本地库初始化"}},[t._v("#")]),t._v(" 1.1本地库初始化")]),t._v(" "),_("ul",[_("li",[t._v("命令：git init")]),t._v(" "),_("li",[t._v("效果：生成一个 .git的本地库")]),t._v(" "),_("li",[t._v("注意：.git目录中存放的是本地库相关的子目录和文件，不要乱整")])]),t._v(" "),_("h4",{attrs:{id:"_1-2设置签名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2设置签名"}},[t._v("#")]),t._v(" 1.2设置签名")]),t._v(" "),_("ul",[_("li",[t._v("形式：\n用户名：tom\nEmail地址：随便写就行")]),t._v(" "),_("li",[t._v("作用：区分不同开发人员身份")]),t._v(" "),_("li",[t._v("辨析：和登录代码托管中心的不一样")]),t._v(" "),_("li",[t._v("命令：\n"),_("ul",[_("li",[t._v("项目级别/仓库级别：仅在当前本地库范围内有效\n"),_("ul",[_("li",[t._v("git config user.name tom_pro")]),t._v(" "),_("li",[t._v("git config user.email xxx@111.com")]),t._v(" "),_("li",[t._v("信息保存位置： ./git/config")])])]),t._v(" "),_("li",[t._v("系统用户级别：登录当前操作系统的用户\n"),_("ul",[_("li",[t._v("git congig --global user.name tom_glb")]),t._v(" "),_("li",[t._v("git congig --global user.email xxx@111.com")]),t._v(" "),_("li",[t._v("信息保存位置： ~/.gitconfig （~为系统当前用户目录）")])])]),t._v(" "),_("li",[t._v("优先级：\n"),_("ul",[_("li",[t._v("就近原则：项目级别优先于系统用户级别")]),t._v(" "),_("li",[t._v("如果只有系统用户级别的签名，就以系统用户级别的签名为准")]),t._v(" "),_("li",[t._v("二者都没有不允许")])])])])])]),t._v(" "),_("h4",{attrs:{id:"_1-3添加提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3添加提交"}},[t._v("#")]),t._v(" 1.3添加提交")]),t._v(" "),_("ul",[_("li",[t._v("git status  查看工作区，暂存区状态")]),t._v(" "),_("li",[t._v("git add [file name]（若为. 表示所有文件）将工作区的提交到暂存区或开始追踪")]),t._v(" "),_("li",[t._v('git commit -m "commit_message" [file name] （若为. 表示所有文件） 将暂存区提交到本地库\n'),_("ul",[_("li",[t._v("如果你想要将这一次的提交仍然采用上一次的commit log则可以使用 git commit --amend")])])])]),t._v(" "),_("h4",{attrs:{id:"_1-4历史记录"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4历史记录"}},[t._v("#")]),t._v(" 1.4历史记录")]),t._v(" "),_("ul",[_("li",[t._v("git log 查看历史记录\n"),_("ul",[_("li",[t._v("git log --pretty=oneline (以最简洁的方式显示日志 无提交信息)")]),t._v(" "),_("li",[t._v("git log --oneline（比pretty更简洁，哈希值取一部分）")]),t._v(" "),_("li",[_("strong",[t._v("git reflog")]),t._v("  (推荐)(HEAD@(指针移动的到这个历史记录的次数)，提交记录，齐全）")]),t._v(" "),_("li",[t._v("多屏显示方式：如果记录很多就会默认是这种显示\n"),_("ul",[_("li",[t._v("空格向下翻页")]),t._v(" "),_("li",[t._v("b向上翻页")]),t._v(" "),_("li",[t._v("q退出")])])])])])]),t._v(" "),_("h4",{attrs:{id:"_1-5前进后退"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-5前进后退"}},[t._v("#")]),t._v(" 1.5前进后退")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("基于索引值操作")]),t._v("(推荐)\n"),_("ul",[_("li",[t._v("git reset --hard [索引值(只需要一部分索引值)]")])])]),t._v(" "),_("li",[t._v("使用^符号（只能往过去）\n"),_("ul",[_("li",[t._v("git reset --hard HEAD ^  n个符号回退n步")]),t._v(" "),_("li",[t._v("git reset --hard HEAD^^ 退两步")])])]),t._v(" "),_("li",[t._v("使用~符号（只能往过去）\n"),_("ul",[_("li",[t._v("git reset --hard HEAD~[int 回退步数]")])])])]),t._v(" "),_("h5",{attrs:{id:"reset-命令的三个参数对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reset-命令的三个参数对比"}},[t._v("#")]),t._v(" reset 命令的三个参数对比")]),t._v(" "),_("ul",[_("li",[t._v("--soft 参数\n"),_("ul",[_("li",[t._v("仅在本地库移动指针")])])]),t._v(" "),_("li",[t._v("--mixed 参数\n"),_("ul",[_("li",[t._v("本地库移动HEAD")]),t._v(" "),_("li",[t._v("重置暂存区")])])]),t._v(" "),_("li",[t._v("--hard 参数\n"),_("ul",[_("li",[t._v("三个区域都改变")])])]),t._v(" "),_("li",[t._v("注意\n"),_("ul",[_("li",[t._v("--soft参数改变本地库，git会认为本地库和暂存区不一样，从而认为暂存区也改变了")]),t._v(" "),_("li",[t._v("--mixed 改变本地库和暂存区，从而认为工作区变了")])])])]),t._v(" "),_("h4",{attrs:{id:"_1-6-删除文件在本地库找回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-删除文件在本地库找回"}},[t._v("#")]),t._v(" 1.6 删除文件在本地库找回")]),t._v(" "),_("ul",[_("li",[t._v("前提： 删除前的状态提交到了本地库")]),t._v(" "),_("li",[t._v("同样回退到历史记录就可以了")])]),t._v(" "),_("h4",{attrs:{id:"_1-7-比较文件差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-比较文件差异"}},[t._v("#")]),t._v(" 1.7 比较文件差异")]),t._v(" "),_("ul",[_("li",[t._v("git diff[文件名]\n"),_("ul",[_("li",[t._v("将工作区中的文件和暂存区对应的文件进行比较")])])]),t._v(" "),_("li",[t._v("git diff[本地库中历史版本][文件名] eg: git diff[HEAD^][文件名]\n"),_("ul",[_("li",[t._v("工作区文件对比本地库文件")]),t._v(" "),_("li",[t._v("不指定文件名就可以对比所有工作区文件")])])])]),t._v(" "),_("h4",{attrs:{id:"_1-8-分支管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-分支管理"}},[t._v("#")]),t._v(" 1.8 分支管理")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("什么是分支")]),t._v(" "),_("ul",[_("li",[t._v("多条线推进多个任务")])])]),t._v(" "),_("li",[_("p",[t._v("好处")]),t._v(" "),_("ul",[_("li",[t._v("并行开发，提高效率")]),t._v(" "),_("li",[t._v("某分支开发失败不会对其他分支有影响，删除失败分支即可")])])]),t._v(" "),_("li",[_("p",[t._v("git branch 查看所有分支")]),t._v(" "),_("ul",[_("li",[t._v("带*的分支是当前所在的分支，是HEAD指针指向的分支")])]),t._v(" "),_("p",[t._v("![image-20201208171111329](Git Note.assets/image-20201208171111329.png)")]),t._v(" "),_("p",[t._v("![image-20201208171125971](Git Note.assets/image-20201208171125971.png)")])]),t._v(" "),_("li",[_("p",[t._v("git branch [分支名] 创建分支")]),t._v(" "),_("ul",[_("li",[t._v("这就是在当前所在的提交对象上创建一个指针")])]),t._v(" "),_("p",[t._v("![image-20201208170955019](Git Note.assets/image-20201208170955019.png)")]),t._v(" "),_("ul",[_("li",[t._v("创建分支后在分支上进行开发会使得分之指针向前推进，如果分支同时推进会产生分叉")])]),t._v(" "),_("p",[t._v("![image-20201208171356276](Git Note.assets/image-20201208171356276.png)")])]),t._v(" "),_("li",[_("p",[t._v("git checkout [分支名] 切换分支")]),t._v(" "),_("ul",[_("li",[t._v("切换HEAD指针的指向")])])]),t._v(" "),_("li",[_("p",[t._v("合并分支")]),t._v(" "),_("ul",[_("li",[t._v("第一：切换到要receiver分支")]),t._v(" "),_("li",[t._v("第二：git merge [sender分支]")]),t._v(" "),_("li",[t._v("通过merge合并分支后会在当前所在的分之多创建一个commit")]),t._v(" "),_("li",[t._v("例子：合并前在master分支，merge到iss53分支")])]),t._v(" "),_("p",[t._v("![image-20201208172337413](Git Note.assets/image-20201208172337413.png)")]),t._v(" "),_("p",[t._v("![image-20201208172426757](Git Note.assets/image-20201208172426757.png)")])]),t._v(" "),_("li",[_("p",[t._v("解决冲突")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("产生原因")]),t._v(" "),_("ul",[_("li",[t._v("再分出一个branch过后，两个 branch的同一个部分作出了不同的修改，若直接合并的话就会造成一个branch的修改丢失，所以需要进行手动修改")])])]),t._v(" "),_("li",[_("p",[t._v("解决")]),t._v(" "),_("ul",[_("li",[t._v("编辑文件，删除特殊符号\n"),_("ul",[_("li",[t._v("vscode有支持的直接修改的选项")])])])]),t._v(" "),_("p",[t._v("![image-20201208172828631](Git Note.assets/image-20201208172828631.png)")]),t._v(" "),_("ul",[_("li",[t._v("把文件修改到满意的程度")]),t._v(" "),_("li",[t._v("git add[文件名]")]),t._v(" "),_("li",[t._v("生成commit\n"),_("ul",[_("li",[t._v('如果是merge的话直接git commit -m"message" ，会生成一个新的commit')])])]),t._v(" "),_("li",[t._v("如果是rebase的话应该使用git rebase --continue")]),t._v(" "),_("li",[t._v("注意：在解决冲突的时候应该注意HEAD的指向，有可能HEAD此时指向的是fetch新生成的origin/<>分支")])])])])]),t._v(" "),_("li",[_("p",[t._v("git rebase [base分支]")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("以base分支为底重构提交历史，使得整个提交历史呈线形")])]),t._v(" "),_("li",[_("p",[t._v("例子：")]),t._v(" "),_("p",[t._v("以merge合并master和experiment分支，会多一个C5的commit对象，该对象其实比较冗余，并且历史纪录看起来并不清晰")])])]),t._v(" "),_("p",[t._v("![image-20201208174927519](Git Note.assets/image-20201208174927519.png)")]),t._v(" "),_("p",[t._v("在experiment分支中执行git rebase master会得到以下提交历史：")]),t._v(" "),_("p",[t._v("![image-20201208175147702](Git Note.assets/image-20201208175147702.png)")]),t._v(" "),_("p",[t._v("再在master分支中执行git merge experiment就可以快进到以下：这样的合并更加的清晰")]),t._v(" "),_("p",[t._v("![image-20201208175437659](Git Note.assets/image-20201208175437659.png)")])])]),t._v(" "),_("h4",{attrs:{id:"_1-9-git-stash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-git-stash"}},[t._v("#")]),t._v(" 1.9 Git Stash")]),t._v(" "),_("ul",[_("li",[t._v("git stash 或者是 git stash save ' ' 保存现在工作区的状态到一个存储状态的栈中")]),t._v(" "),_("li",[t._v("git stash save'' 可以为这一次的状态命名")]),t._v(" "),_("li",[t._v("git stash list\n"),_("ul",[_("li",[t._v("查看目前的状态栈的状态，有几个状态在栈中")])])]),t._v(" "),_("li",[t._v("git stash apply <状态名>\n"),_("ul",[_("li",[t._v("状态名不加的话默认用栈顶的状态来恢复")])])]),t._v(" "),_("li",[t._v("git stash pop\n"),_("ul",[_("li",[t._v("应用栈顶的状态并且把栈顶的状态删除")])])]),t._v(" "),_("li",[t._v("注意在应用stash到目前的工作区的时候有可能会引发冲突，需要进行冲突的解决")])]),t._v(" "),_("h4",{attrs:{id:"_1-10-git-cherry-pick"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-git-cherry-pick"}},[t._v("#")]),t._v(" 1.10 git cherry-pick")]),t._v(" "),_("p",[t._v("对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。")]),t._v(" "),_("p",[t._v("这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（"),_("code",[t._v("git merge")]),t._v("）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。")]),t._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[t._v("$ "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitHash"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),_("p",[t._v("把其他分支上某一个commit的代码改动应用到当前分支上")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰cherry-pick"),_("OutboundLink")],1)]),t._v(" "),_("h3",{attrs:{id:"远程库操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程库操作"}},[t._v("#")]),t._v(" 远程库操作")]),t._v(" "),_("h4",{attrs:{id:"github"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" Github")]),t._v(" "),_("ul",[_("li",[t._v("远程库与本地库的交互逻辑")])]),t._v(" "),_("p",[t._v("![image-20200301102905089](Git Note/image-20200301102905089.png)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("创建远程库")]),t._v(" "),_("ul",[_("li",[t._v("在github上创建就好了")])])]),t._v(" "),_("li",[_("p",[t._v("在本地创建远程库别名")]),t._v(" "),_("ul",[_("li",[t._v("查看本地所有别名\n"),_("ul",[_("li",[t._v("git remote -v")])])]),t._v(" "),_("li",[t._v("加入远程库别名\n"),_("ul",[_("li",[t._v("git remote add [别名] [远程库链接]")])])]),t._v(" "),_("li",[t._v("删除别名\n"),_("ul",[_("li",[t._v("git remote rm [别名]")])])])])]),t._v(" "),_("li",[_("p",[t._v("推送本地库")]),t._v(" "),_("ul",[_("li",[t._v("git push <远程主机名> <本地分支名>:<远程分支名>")]),t._v(" "),_("li",[t._v('如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n'),_("ul",[_("li",[t._v("eg: git push origin master")])])]),t._v(" "),_("li",[t._v("如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。")])])]),t._v(" "),_("li",[_("p",[t._v("远程库克隆到本地库")]),t._v(" "),_("ul",[_("li",[t._v("git clone [远程库地址]")]),t._v(" "),_("li",[t._v("三个效果\n"),_("ul",[_("li",[t._v("完整把远程库下载到本地")]),t._v(" "),_("li",[t._v("创建origin远程地址别名")]),t._v(" "),_("li",[t._v("初始化本地库")])])])])]),t._v(" "),_("li",[_("p",[t._v("邀请新成员")]),t._v(" "),_("ul",[_("li",[t._v("settings -> collaboration->copy link->accept")])])]),t._v(" "),_("li",[_("p",[t._v("拉取远程库的更新")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("fetch")]),t._v(" "),_("ul",[_("li",[t._v("git fetch [远程库地址别名] [远程分支名]")]),t._v(" "),_("li",[t._v("只把远程内容下载到本地，不做更改")]),t._v(" "),_("li",[t._v("要看下载内容要切换到远程库的fetch的分支上\n"),_("ul",[_("li",[t._v("git checkout [远程库地址别名/远程分支名]")]),t._v(" "),_("li",[t._v("当你从远程库fetch东西了过后就会自动创建一个[远程库地址别名/远程分支名]的分支")])])])])]),t._v(" "),_("li",[_("p",[t._v("merge")]),t._v(" "),_("ul",[_("li",[t._v("git merge [远程库地址别名/远程分支名]")]),t._v(" "),_("li",[t._v("merge的作用就是把写的分支合并到当前分支，所以就把被创建的[远程库地址别名/远程分支名]分支合并到当前分支")])])]),t._v(" "),_("li",[_("p",[t._v("pull = fetch + merge")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("git pull <远程主机名> <远程分支名>:<本地分支名>")])]),t._v(" "),_("li",[_("p",[t._v("如果远程分支是与当前分支合并，则冒号后面的部分可以省略。")])]),t._v(" "),_("li",[_("p",[t._v("如果当前分支与远程分支存在追踪关系，"),_("code",[t._v("git pull")]),t._v("就可以省略远程分支名。")])]),t._v(" "),_("li",[_("p",[t._v("如果合并需要采用rebase模式，可以使用"),_("code",[t._v("--rebase")]),t._v("选项。")]),t._v(" "),_("ul",[_("li",[_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])]),t._v(" "),_("li",[_("p",[t._v("git pull --rebase其实作用等于先git fetch再git rebase")])]),t._v(" "),_("li",[_("p",[t._v("为什么使用--rebase?")])]),t._v(" "),_("li",[_("p",[t._v("![5](Git Note.assets/202205-20161112141356827-143146414.png)")]),t._v(" "),_("ul",[_("li",[t._v("正常情况在apiwrapper分支上pull下更新合并会产生F这个默认的commit使得log十分冗杂")])])]),t._v(" "),_("li",[_("p",[t._v("![6](Git Note.assets/202205-20161112141357467-370907848.png)")]),t._v(" "),_("ul",[_("li",[t._v("但是这种--rebase的方式就只会保持一条单一的commit记录")])])])])])])])])]),t._v(" "),_("li",[_("p",[t._v("协同开发时的冲突和解决")]),t._v(" "),_("ul",[_("li",[t._v("跟多分支的时候发生的冲突类似，若不是基于github远程库最新版所做的修改，不能推送，必须要先拉取下来在推送")]),t._v(" "),_("li",[t._v("要先拉取下来最新的版本，这个时候会提示冲突，然后再去除特殊符号，改成想要的样子，再修改到本地库并推送。")]),t._v(" "),_("li",[t._v("注意： 参考解决本地多分支冲突，commit不加文件名")])])]),t._v(" "),_("li",[_("p",[t._v("跨团队协作操作")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("fork")]),t._v(" "),_("ul",[_("li",[t._v("以团队外参与人的身份点fork")])]),t._v(" "),_("p",[t._v("![image-20200301114330949](Git Note/image-20200301114330949.png)")])]),t._v(" "),_("li",[_("p",[t._v("clone")]),t._v(" "),_("ul",[_("li",[t._v("clone下因为fork新建远程库的内容到本地")])])]),t._v(" "),_("li",[_("p",[t._v("本地修改并推送到fork远程库")])]),t._v(" "),_("li",[_("p",[t._v("Pull request")]),t._v(" "),_("ul",[_("li",[t._v("new pull request -> create pull request->填写消息")]),t._v(" "),_("li",[t._v("接受人再点commit-changer看修改操作，若无问题则merge pull request")]),t._v(" "),_("li",[t._v("接受人再把修改拉到本地")])])])])])]),t._v(" "),_("h3",{attrs:{id:"git-hooks"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks"}},[t._v("#")]),t._v(" Git hooks")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("git hooks是一些自定义的脚本，用于控制git工作的流程，分为"),_("strong",[t._v("客户端")]),t._v("钩子和"),_("strong",[t._v("服务端")]),t._v("钩子。")])]),t._v(" "),_("li",[_("p",[t._v("客户端钩子包括："),_("code",[t._v("pre-commit")]),t._v("、"),_("code",[t._v("prepare-commit-msg")]),t._v("、"),_("code",[t._v("commit-msg")]),t._v("、"),_("code",[t._v("post-commit")]),t._v("等，主要用于控制客户端git的提交工作流。服务端钩子："),_("code",[t._v("pre-receive")]),t._v("、"),_("code",[t._v("post-receive")]),t._v("、"),_("code",[t._v("update")]),t._v("，主要在服务端接收提交对象时、推送到服务器之前调用。")])]),t._v(" "),_("li",[_("p",[t._v("git hooks位置位于每个git项目下的隐藏文件夹.git中的hooks文件夹里，进去后会看到一些hooks的官方示例，他们都是以.sample结尾的文件名。"),_("strong",[t._v("注意这些以.sample结尾的示例脚本是不会执行的，只有重命名后才会生效")])])])]),t._v(" "),_("h4",{attrs:{id:"pre-commit的例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit的例子"}},[t._v("#")]),t._v(" pre-commit的例子")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("pre-commit")]),t._v("是客户端hooks之一，也是接下来要介绍的钩子。"),_("code",[t._v("pre-commit")]),t._v("在"),_("code",[t._v("git add")]),t._v("提交之后，然后执行"),_("code",[t._v("git commit")]),t._v("时执行，脚本执行没报错就继续提交，反之就驳回提交的操作。")]),t._v(" "),_("li",[t._v("这个钩子中可以实现：对将要提交的代码进行检查、优化代码格式、或者对提交的图片进行压缩等等任务。下面是用shell编写的具体代码：")])]),t._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("STAGE_FILES")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token variable"}},[_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --cached --name-only --diff-filter"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ACM -- "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.vue'")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.js'")]),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("STAGE_FILES}")]),t._v(" -gt "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'开始eslint检查'")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" eslint "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&>")]),t._v(" /dev/null\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$?")]),t._v('"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'没安装eslint'")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PASS")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("FILE")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$STAGE_FILES")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n        eslint "),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$FILE")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$?")]),t._v('"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n      "),_("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PASS")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PASS")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n      "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint检查没通过！"')]),t._v("\n      "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint检查完毕"')]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'没有js文件需要检查'")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),_("p",[t._v("稍微解释下：首先用"),_("code",[t._v("git diff")]),t._v("获取到提交到暂存区的文件，我这里添加了过滤即只获取.vue和.js文件。")]),t._v(" "),_("p",[t._v("然后判断eslint是否已安装，接着再对获取到的文件依次检查，当某个文件检查不通过时不会中断进程，会继续遍历所有文件，这样最后在控制台可以显示出所有检查不通过的文件信息")]),t._v(" "),_("p",[t._v("exit即表示退出当前脚本进程、后面接上状态码，0表示正常，会继续执行"),_("code",[t._v("git commit")]),t._v("的操作，其他情况表示出错，不会继续commit。")]),t._v(" "),_("p",[t._v("将上面的代码保存为"),_("code",[t._v("pre-commit")]),t._v("，然后存放在.git/hooks中，然后每次执行"),_("code",[t._v("git commit")]),t._v("时就会使用eslint进行代码检查了。")])])}),[],!1,null,null,null);s.default=a.exports}}]);